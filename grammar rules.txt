multiline: NEWLINE* (expression|statements|jump_statements) (NEWLINE* (expression|statements|jump_statements))* NEWLINE*

jump-statements:KEYWORD:yield expression|KEYWORD:proceed | KEYWORD:escape

statements: (KEYWORD:define)? IDENTIFIER EQUAL expression

///////////////////////////////////////////////////////////////////////////////switch-statement: KEYWORD:menu ternary-expression LPAREN2 (case-statement)+ default-statement? RPAREN2/////////////////////////////////

switch-statement: KEYWORD:menu ternary-expression LPAREN2 case-statement*default-statement?case_statement* RPAREN2

case-statement: KEYWORD:choice ternary-expression LPAREN2 ((expression|statements) RPAREN2)| (NEWLINE multiline RPAREN2)

default-statement: KEYWORD:fallback LPAREN2 ((expression|statements) RPAREN2)| (NEWLINE multiline RPAREN2)

expression: jump_statements | ternary-expression

ternary-expression: (logical-expression|statements) (QUESTION ternary-expression COLON ternary-expression)*

logical-expression: comp-expression ((KEYWORD:AND | KEYWORD:OR) comp-expression)*

comp-expression: KEYWORD:NOT comp-expression | arith-expression ((EE | NEQ | LT | GT | LTE | GTE) arith-expression)*

arith-expression: term ((PLUS | MINUS) term)*

term: unary ((MUL | DIV) unary)*

unary: (PLUS | MINUS) unary | exponent

exponent: factor (EXP unary)*

factor: INT | FLOAT | STRING | IDENTIFIER | LPAREN expression RPAREN | if-expression | for-expression | while-expression | function-definition | list-expression | function-call | switch-statement

function-call: IDENTIFIER LPAREN (expression(COMMA expression)*)? RPAREN

list-expression: LPAREN3 (expression(COMMA expression)*)? RPAREN RPAREN3

while-expression: Keyword:whenever expression LPAREN2 ((expression|statements) RPAREN2)| (NEWLINE multiline RPAREN2)

for-expression: KEYWORD:Cycle IDENTIFIER EQUAL expression COLON expression (COLON:expression)?LPAREN2 ((expression|statements)RPAREN2)| (NEWLINE multiline RPAREN2)

function-definition: KEYWORD:method IDENTIFIER?LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN LPAREN2 ((expression|statements)RPAREN2)| (NEWLINE multiline RPAREN2)

if-expression: KEYWORD:when expression LPAREN2 ((expression|statements) RPAREN2 (elif-expression|else-expression)?) | (NEWLINE multiline RPAREN2 (elif-expression|else-expression))

elif-expression: KEYWORD:orwhen expression LPAREN2 ((expression|statements) RPAREN2 (elif-expression|else-expression)?) | (NEWLINE multiline RPAREN2 (elif-expression|else-expression))

else-expression: KEYWORD:otherwise LPAREN2 (((expression|statements)RPAREN2)|NEWLINE multiline RPAREN2)

"""

Grammar Rules:
- expression : term ((PLUS | MINUS) term)*
  - Defines an arithmetic expression supporting addition and subtraction.
  - Left associative, meaning operations are performed from left to right.
  - Example: 3 + 5 - 2

- term : factor ((MUL | DIV | EXP) factor)*
  - Defines multiplication and division, which have higher precedence than addition/subtraction.
  - Ensures multiplication and division are evaluated before addition/subtraction.
  - Example: 3 * 4 / 2

- factor: INT | FLOAT | (PLUS | MINUS) factor | LPAREN expression RPAREN
  - The fundamental building block of expressions.
  - Supports numbers (integers and floats).
  - Allows unary operations like `-5` or `+3`.
  - Handles grouped expressions using parentheses.
  - Example: (3 + 2) * -4

Operator Precedence:
1. Parentheses (`()`) â€“ Highest precedence
2. Exponentiation (`**`)
3. Unary operators (`+`, `-`)
4. Multiplication and Division (`*`, `/`)
5. Addition and Subtraction (`+`, `-`)

Usage:
- The grammar ensures correct parsing of expressions by following precedence rules.
- Example valid expressions:
  - `3 + 4 * 2`
  - `-5 + (6 / 2) * 3`
  - `(3 + 4) * 2`

"""